/**
 * PiScanner API
 * PiScanner API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FileOperationResult } from '../model/fileOperationResult';
import { Session } from '../model/session';
import { SessionDetails } from '../model/sessionDetails';
import { SkipHoles } from '../model/skipHoles';
import { Status } from '../model/status';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ScannerService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete all photos from the archive
     * 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteArchive(X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<FileOperationResult>;
    public deleteArchive(X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileOperationResult>>;
    public deleteArchive(X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileOperationResult>>;
    public deleteArchive(X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FileOperationResult>('delete',`${this.basePath}/scanner/archive/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Starts a new scanning session
     * 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initSession(X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Session>;
    public initSession(X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Session>>;
    public initSession(X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Session>>;
    public initSession(X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Session>('post',`${this.basePath}/scanner/session/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all active sessions
     * 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSessions(X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Session>>;
    public listSessions(X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Session>>>;
    public listSessions(X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Session>>>;
    public listSessions(X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Session>>('get',`${this.basePath}/scanner/session/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Move all photos to the archive
     * 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveToArchive(X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<FileOperationResult>;
    public moveToArchive(X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileOperationResult>>;
    public moveToArchive(X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileOperationResult>>;
    public moveToArchive(X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FileOperationResult>('post',`${this.basePath}/scanner/archive/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset the connection to the camera
     * 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetCamera(X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public resetCamera(X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public resetCamera(X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public resetCamera(X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('post',`${this.basePath}/scanner/camera/reset/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get session details
     * 
     * @param session_id 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sessionDetails(session_id: number, X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<SessionDetails>;
    public sessionDetails(session_id: number, X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SessionDetails>>;
    public sessionDetails(session_id: number, X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SessionDetails>>;
    public sessionDetails(session_id: number, X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (session_id === null || session_id === undefined) {
            throw new Error('Required parameter session_id was null or undefined when calling sessionDetails.');
        }


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SessionDetails>('get',`${this.basePath}/scanner/session/${encodeURIComponent(String(session_id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Skip the given number of holes
     * 
     * @param body 
     * @param session_id 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public skipHoles(body: SkipHoles, session_id: number, X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public skipHoles(body: SkipHoles, session_id: number, X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public skipHoles(body: SkipHoles, session_id: number, X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public skipHoles(body: SkipHoles, session_id: number, X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling skipHoles.');
        }

        if (session_id === null || session_id === undefined) {
            throw new Error('Required parameter session_id was null or undefined when calling skipHoles.');
        }


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Status>('put',`${this.basePath}/scanner/session/${encodeURIComponent(String(session_id))}/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start scanning
     * 
     * @param session_id 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startScan(session_id: number, X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public startScan(session_id: number, X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public startScan(session_id: number, X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public startScan(session_id: number, X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (session_id === null || session_id === undefined) {
            throw new Error('Required parameter session_id was null or undefined when calling startScan.');
        }


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('post',`${this.basePath}/scanner/session/${encodeURIComponent(String(session_id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop scanning and finishes the session
     * 
     * @param session_id 
     * @param X_Fields An optional fields mask
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stopSession(session_id: number, X_Fields?: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public stopSession(session_id: number, X_Fields?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public stopSession(session_id: number, X_Fields?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public stopSession(session_id: number, X_Fields?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (session_id === null || session_id === undefined) {
            throw new Error('Required parameter session_id was null or undefined when calling stopSession.');
        }


        let headers = this.defaultHeaders;
        if (X_Fields !== undefined && X_Fields !== null) {
            headers = headers.set('X-Fields', String(X_Fields));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('delete',`${this.basePath}/scanner/session/${encodeURIComponent(String(session_id))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
